class Solution
{
public:
    
    vector<int> nearestSmallerTower(vector<int> arr)
    {
        int n=arr.size();
        vector<int> res(n);
        vector<pair<int,int>> left,right;
        stack<pair<int,int>> s;
        for(int i=0;i<n;i++){
            while(!s.empty() && s.top().first>=arr[i])
                s.pop();
            if(s.empty())
                left.push_back({INT_MAX,-1});
            else
                left.push_back(s.top());
            s.push({arr[i],i});
        }
        while(!s.empty())   s.pop();
        for(int i=n-1;i>=0;i--){
            while(!s.empty() && s.top().first>=arr[i])
                s.pop();
            if(s.empty())
                right.push_back({INT_MAX,-1});
            else
                right.push_back(s.top());
            s.push({arr[i],i});
        }
        reverse(right.begin(),right.end());
        for(int i=0;i<n;i++){
            if(left[i].first==INT_MAX && right[i].first==INT_MAX){
                res[i]=-1;
                continue;
            }
            else if(left[i].first==INT_MAX && right[i].first!=INT_MAX){
                res[i]=right[i].second;
                continue;
            }
            else if(left[i].first!=INT_MAX && right[i].first==INT_MAX){
                res[i]=left[i].second;
                continue;
            }
            if( abs(i-left[i].second) < abs(i-right[i].second) )
                res[i]=left[i].second;
            else if( abs(i-left[i].second) > abs(i-right[i].second) )
                res[i]=right[i].second; 
            else if(left[i].first<right[i].first)
                res[i]=left[i].second;
            else if(left[i].first>right[i].first)
                res[i]=right[i].second;
            else
                res[i]=min(left[i].second,right[i].second);
        }
        return res;
    }
};
