class Solution {
public:
    string simplifyPath(string path) {
        int n=path.length();
        stack<string> s;
        int i=0;
        while(i<n){
            if(path[i]=='/' && (s.empty() || s.top()!="/"))
                s.push("/");
            while(i<n && path[i]=='/') i++;
            string temp="";
            while(i<n && path[i]!='/'){
                temp+=path[i++];
            }
            if(temp==".."){
                if(s.size()>=3){
                    s.pop();
                    s.pop();
                    s.pop();
                }
            }
            else if(temp=="." && !s.empty())   s.pop();
            else if(temp!="")    s.push(temp);
            // cout<<s.top();
        }
        string res="";
        if(s.size()>1 && s.top()=="/")    s.pop();
        stack<string> fn;
        while(!s.empty()){
            fn.push(s.top());
            // cout<<s.top();
            s.pop();
        }
        while(!fn.empty()){
            res+=fn.top();
            fn.pop();
        }
        if(res=="")
            return "/";
        return res;
    }
};
// class Solution {
// public:
//     string simplifyPath(string path) {
        
//         stack<string> st;
//         string res;
        
//         for(int i = 0;  i<path.size(); ++i)
//         {
//             if(path[i] == '/')    
//                 continue;
//             string temp;
// 			// iterate till we doesn't traverse the whole string and doesn't encounter the last /
//             while(i < path.size() && path[i] != '/')
//             {
// 				// add path to temp string
//                 temp += path[i];
//                 ++i;
//             }
//             if(temp == ".")
//                 continue;
// 			// pop the top element from stack if exists
//             else if(temp == "..")
//             {
//                 if(!st.empty())
//                     st.pop();
//             }
//             else
// 			// push the directory file name to stack
//                 st.push(temp);
//         }
        
// 		// adding all the stack elements to res
//         while(!st.empty())
//         {
//             res = "/" + st.top() + res;
//             st.pop();
//         }
        
// 		// if no directory or file is present
//         if(res.size() == 0)
//             return "/";
        
//         return res;
//     }
// };
