/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     pair<int,int> solve(TreeNode* root){
//         if(root==NULL)
//             return {0,0};
//         pair<int,int> left=solve(root->left);   // {9,9}
//         pair<int,int> right=solve(root->right); // {42,35} {15,15} {7,7}
//         int lrm=left.second+right.second+root->val;
//         int l=left.first+root->val;
//         int r=right.first+root->val;
//         int ans=max(lrm,max(l,r));
//         int h=root->val+max(left.second,right.second);
//         return {ans,h};
//     }
//     int maxPathSum(TreeNode* root) {
//         if(!root->left && !root->right)
//             return root->val;

//         pair<int,int> p= solve(root);
//         return p.first;     
//     }
// };
// class Solution {
// public:
//     int maxPathSum(TreeNode* root) {
//         int maxSum = INT_MIN;
//         DFS(root, maxSum);
//         return maxSum;
//     }
    
//     int DFS(TreeNode* root, int& maxSum){
//         if(!root) return 0;
//         int left = max(0, DFS(root->left, maxSum));
//         int right = max(0, DFS(root->right, maxSum));
//         maxSum = max(maxSum, left + right + root->val);
//         return max(left, right) + root->val;
//     }
// };

class Solution {
public:
    int res=INT_MIN;
    pair<int,int> solve(TreeNode* root){
        if(!root)
            return {INT_MIN,INT_MIN};
        pair<int,int> l=solve(root->left);
        pair<int,int> r=solve(root->right);
        if(l.second<0)
            l.second=0;
        if(r.second<0)
            r.second=0;
        return {max(l.first,max(r.first,l.second+r.second+root->val)),max(l.second,r.second)+root->val};
    }
    int maxPathSum(TreeNode* root) {
        if(!root)
            return 0;
        pair<int,int> p=solve(root);
        return p.first;
    }
};
