class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid){
	    int n=grid.size(),m=grid[0].size();
	    vector<vector<int>> res(n,vector<int>(m,INT_MAX));
	    vector<vector<bool>> vis(n,vector<bool>(m,false));
	    vector<pair<int,int>> dir{{0,1},{-1,0},{1,0},{0,-1}};
	    queue<pair<int,int>> q;
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            if(grid[i][j]){
	                res[i][j]=0;
	                vis[i][j]=1;
	                q.push({i,j});
	            }
	        }
	    }
	    while(!q.empty()){
	        int i=q.front().first,j=q.front().second;
	        q.pop();
	        for(auto it:dir){
	            if(i + it.first >= 0 && i + it.first < n && j + it.second >= 0 && j + it.second < m && res[i + it.first][j + it.second] > res[i][j]+abs(it.first)+abs(it.second) && !vis[i+it.first][j+it.second]){
	                res[i+it.first][j+it.second]=res[i][j]+abs(it.first)+abs(it.second);
	                vis[i][j]=1;
	                q.push({i+it.first,j+it.second});
	            }
	        }
	    }
	    return res;
	}
};
