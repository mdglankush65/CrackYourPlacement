// when more push operations then peek and pop;
// class MyQueue {
// public:
//     stack<int> s,t;
//     MyQueue() {
        
//     }
    
//     void push(int x) { //O(1)
//         s.push(x);
//     }
    
//     int pop() { //O(N)
//         if(t.empty())
//             while(!s.empty()){
//                 t.push(s.top());
//                 s.pop();
//             }
//         int val=t.top();
//         t.pop();
//         return val;
//     }
    
//     int peek() { //O(N)
//         if(t.empty()){
//             while(!s.empty()){
//                 t.push(s.top());
//                 s.pop();
//             }
//         }
//         return t.top();
//     }
    
//     bool empty() { //O(1)
//         return s.empty() && t.empty();
//     }
// };
// when more peek and pop operations then push;
class MyQueue {
public:
    stack<int> s,t;
    MyQueue() {
        
    }

    void push(int x) { //O(N)
        while(!s.empty()){
            t.push(s.top());
            s.pop();
        }
        s.push(x);
        while(!t.empty()){
            s.push(t.top());
            t.pop();
        }
    }
    
    int pop() { //O(1)
        int val=s.top();
        s.pop();
        return val;
    }
    
    int peek() { //O(1)
        return s.top();
    }
    
    bool empty() { //O(1)
        return s.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
