/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class BSTIterator {
public:
    stack<TreeNode*> s;
    BSTIterator(TreeNode* root) {
        partialInorder(root);
    }
    
    void partialInorder(TreeNode* root){
        while(root != NULL){
            s.push(root);
            root = root->left;
        }
    }
    
    int next() {
        TreeNode* top = s.top();
        s.pop();
        partialInorder(top->right);
        return top->val;
    }
    
    bool hasNext() {
        return !s.empty();
    }
};

// class BSTIterator {
// public:
//     vector<int> res;
//     int i,n;
//     BSTIterator(TreeNode* root) {
//         i=-1;
//         stack<TreeNode*> s;
//         unordered_map<TreeNode*,bool> mp;
//         s.push(root);
//         while(!s.empty()){
//             TreeNode* curr=s.top();
//             s.pop();
//             if(curr->right && (curr->left==NULL || mp[curr->left]))
//                 s.push(curr->right);
//             if(curr->left==NULL || mp[curr->left]){
//                 res.push_back(curr->val);
//                 mp[curr]=1;
//             }
//             else
//                 s.push(curr);
//             if(curr->left && mp[curr->left]==false)
//                 s.push(curr->left);
            
//         }
//         n=res.size();
//     }
    
//     int next() {
//         i++;
//         return res[i];
//     }
    
//     bool hasNext() {
//         if(i+1<n)
//             return true;
//         return false;
//     }
// };

// class BSTIterator {
//     stack<TreeNode *> myStack;
// public:
//     BSTIterator(TreeNode *root) {
//         pushAll(root);
//     }

//     /** @return whether we have a next smallest number */
//     bool hasNext() {
//         return !myStack.empty();
//     }

//     /** @return the next smallest number */
//     int next() {
//         TreeNode *tmpNode = myStack.top();
//         myStack.pop();
//         pushAll(tmpNode->right);
//         return tmpNode->val;
//     }

// private:
//     void pushAll(TreeNode *node) {
//         for (; node != NULL; myStack.push(node), node = node->left);
//     }
// };

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
