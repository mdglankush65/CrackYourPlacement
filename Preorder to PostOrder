class Solution{
public:
    //Function that constructs BST from its preorder traversal.
    // int find(vector<int> &num,int s,int e,int &target){
    //     while(s<=e){
    //         int mid=s+(e-s)/2;
    //         if(num[mid]==target)
    //             return mid;
    //         else if(num[mid]>target)
    //             e=mid-1;
    //         else
    //             s=mid+1;
    //     }
    //     return -1;
    // }
    // Node* solve(vector<int> &in,vector<int> &pr,int s,int e,int i){
    //     Node* root=NULL;
    //     int ind=find(in,s,e,pr[i]);
    //     if(ind==-1)
    //         return root;
    //     root=newNode(in[ind]);
    //     root->left=solve(in,pr,s,ind-1,i+1);
    //     root->right=solve(in,pr,ind+1,e,ind+1+i);
    //     return root;
    // }
    Node* solve(int pre[],int s,int e){
        if(s>e)
            return NULL;
        Node* root=newNode(pre[s]);
        int ind=s;
        while(ind<=e && pre[ind]<=pre[s])
            ind++;
        root->left=solve(pre,s+1,ind-1);
        root->right=solve(pre,ind,e);
        return root;
    }
    Node* post_order(int pre[], int size){
        // if(size==0)
        //     return NULL;
        // vector<int> in,pr;
        // for(int i=0;i<size;i++){
        //     in.push_back(pre[i]);
        //     pr.push_back(pre[i]);
        // }
        // sort(in.begin(),in.end());
        // return solve(in,pr,0,size-1,0);
        return solve(pre,0,size-1);
    }
};
