// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */
// class Solution {
// public:
//     TreeNode* solve(int i,int s,vector<int>& preorder, vector<int>& postorder){
//         if(i>=preorder.size())
//             return NULL;
//         TreeNode* root=new TreeNode(preorder[i]);
//         i++;
//         int j=1;
//         while(j<preorder.size() && postorder[j-1]!=preorder[i])
//             j++;
//         root->left=solve(i,j,preorder,postorder);
//         root->right=solve(i+j,s-j-1,preorder,postorder);
//         return root;
//     }
//     TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
//         int n=preorder.size();
//         return solve(0,n,preorder,postorder);
//     }
// };


class Solution {
    int preindex=0,posindex=0;
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        TreeNode* root=new TreeNode(preorder[preindex++]);
        if(root->val!=postorder[posindex])
            root->left=constructFromPrePost(preorder,postorder);
        if(root->val!=postorder[posindex])
            root->right=constructFromPrePost(preorder,postorder);
        posindex++;
        return root;
    }
};
