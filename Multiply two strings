class Solution{
  public:
    /*You are required to complete below function */
    // string multiplyStrings(string s1, string s2) {
    //     string res="0";
    //     if(s1.length()>s2.length()){
    //         string temp=s1;
    //         s1=s2;
    //         s2=temp;
    //     }
    //     int cnt=0;
    //     bool neg=false;
    //     if(!s1.empty() && *s1.begin()=='-'){
    //         neg=!neg;
    //         s1.erase(0,1);
    //     }
    //     if(!s2.empty() && *s2.begin()=='-'){
    //         neg=!neg;
    //         s2.erase(0,1);
    //     }
    //     int n=s1.length(),m=s2.length();
    //     for(int i=n-1;i>=0;i--){
    //         int c=0;
    //         string temp="";
    //         for(int j=1;j<=cnt;j++)
    //             temp+='0';
    //         cnt++;
    //         for(int j=m-1;j>=0;j--){
    //           int val=(s1[i]-'0')*(s2[j]-'0')+c;
    //           temp+=to_string(val%10);
    //           c=val/10;
    //         }
    //         if(c)
    //             temp+=to_string(c);
    //         c=0;
    //         if(res==""){
    //             res=temp;
    //             continue;
    //         }
    //         int k=0,l=0;
    //         while(k<res.length() && l<temp.length()){
    //             int val=(res[k]-'0')+(temp[l++]-'0')+c;
    //             res[k++]='0'+val%10;
    //             c=val/10;
    //         }
    //         while(l<temp.length()){
    //             int val=(temp[l++]-'0')+c;
    //             res+='0'+val%10;
    //             c=val/10;
    //         }
    //         if(c)
    //             res+='0'+c;
    //     }
    //     reverse(res.begin(),res.end());
    //     while(!res.empty() && *res.begin()=='0')
    //         res.erase(0,1);
    //     if(neg)
    //         res="-"+res;
    //     if(res=="")
    //         return "0";
    //     return res;
    // }
    string multiplyStrings(string num1, string num2) {
        int sign = 1; 
        if (num1[0] == '-') {
            sign *= -1;
            num1 = num1.substr(1);
        }
        if (num2[0] == '-') {
            sign *= -1;
            num2 = num2.substr(1);
        }
        int n1 = num1.size(), n2 = num2.size();
        string res(n1 + n2, '0');
        for (int i = n2 - 1; i >= 0; i--) {
            int d2 = num2[i] - '0';
            int carry = 0;
            for (int j = n1 - 1; j >= 0; j--) {
                int d1 = num1[j] - '0';
                int prod = d1 * d2 + carry + (res[i + j + 1] - '0');
                carry = prod / 10;
                res[i + j + 1] = prod % 10 + '0';
            }
            res[i] += carry;
        }
        string result = "";
        bool leading_zeros = true;
        for (char c : res) {
            if (leading_zeros && c == '0') continue;
            leading_zeros = false;
            result += c;
        }
        if(sign==-1) result='-'+result;
        return result.empty() ? "0" : result;
    }
};
