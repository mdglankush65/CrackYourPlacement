class Solution {
public:
    // long long res=0;
    // void shutter(vector<int> &nums,int i,int s,int e){
    //     int val=nums[i]/2;
    //     while(val>=s){
    //         if(val>=s && val<=e){
    //             res++;
    //             nums[i]-=val;
    //             nums.insert(nums.begin()+i,val);
    //             return ;
    //         }
    //         val--;
    //     }
    //     return ;
    // }
    long long minimumReplacement(vector<int>& nums) {
        int n=nums.size();
        int last=nums[n-1];
        long ans=0;
        for(int i=n-2;i>=0;--i){
            if(nums[i]>last){
                int t=nums[i]/last;
                if(nums[i]%last)    t++;
                last=nums[i]/t;
                ans+=t-1;
            }
            else
                last=nums[i];
        }
        return ans;
    }
};
