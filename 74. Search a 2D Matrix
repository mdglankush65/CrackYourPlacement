// class Solution {
// public:
//     int binarySearch(int s,int e,vector<int>& nums,int &target){
//         if(s>e)
//             return -1;

//         int mid=s+(e-s)/2;
        
//         if(nums[mid]>=target){
//             int val=binarySearch(s,mid-1,nums,target);
//             if(val==-1)
//                 return mid;
//             return min(mid,val);
//         }
//         return binarySearch(mid+1,e,nums,target);
//     }
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int n=matrix.size(),m=matrix[0].size();
//         vector<int> nums;
//         for(int i=0;i<n;i++){
//             nums.push_back(matrix[i][m-1]);
//         }
        
//         if(nums[0]>=target)
//             nums=matrix[0];
//         else if(nums[n-1]<target)
//             return false;
//         else
//             nums=matrix[binarySearch(0,n-1,nums,target)];
//         for(auto i:nums)
//             cout<<i<<" ";
//         cout<<endl;
//         int i=binarySearch(0,m-1,nums,target);
//         if(i==-1 || nums[i]!=target)
//             return false;
//         return true;
//     }

// };

// class Solution {
// public:
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         if (matrix.empty()) return false;
//         int m = matrix.size(), n = matrix[0].size();
//         int left = 0, right = m * n - 1;

//         while (left <= right) {
//             int mid = left + (right - left) / 2;
//             int mid_row = mid / n;
//             int mid_col = mid - mid_row * n;

//             if (matrix[mid_row][mid_col] == target) {
//                 return true;
//             } else if (matrix[mid_row][mid_col] < target) {
//                 left = mid + 1;
//             } else {
//                 right = mid - 1;
//             }
//         }
//         return false;
//     }
// };

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int target) {
        int n=mat.size(), m=mat[0].size();
        int l=0, r=n*m-1;
        
        while(l <= r){
            int mid = l+(r-l)/2;
            int x = mat[mid/m][mid%m];
            
            if(x > target){
                r = mid-1;
            }else if(x < target){
                l = mid+1;
            }else{
                return true;
            }
        }
        return false;
    }
};
