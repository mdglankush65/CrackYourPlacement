/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next)
            return true;
        ListNode* fast=head->next,*slow=head,*prev=NULL;
        int cnt=1;
        while(fast){
            prev=slow;
            fast=fast->next;
            slow=slow->next;
            cnt++;
            if(fast){
                fast=fast->next;
                cnt++;
            }
        }
        prev->next=NULL;
        if(cnt&1)
            slow=slow->next;
        ListNode* curr=slow,*next=NULL;
        prev=NULL;
        while(curr){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        slow=prev;
        curr=head;
        while(curr && slow){
            if(curr->val!=slow->val)
                return false;
            curr=curr->next;
            slow=slow->next;
        }
        return true;
    }
};
