//gfg
class Solution {
public:
    // int solveWordWrap(vector<int>nums, int k) 
    // { 
    //     int res=0;
    //     int i=0,n=nums.size();
    //     while(i<n-1){
    //         int cnt=i;
    //         int sum=0;
    //         while(i<n && sum<=k){
    //             sum+=nums[i]+1;
    //             if(sum<=k)
    //                 i++;
    //             else    break;
    //         }
    //         if(sum<=k){
    //             res+= (i-cnt-2);
    //         }
    //         else{
    //             sum-=nums[i]+1+1;
    //             res+=(i-cnt-1)+pow(k-sum,2);
    //         }
    //     }
    //     return res;
    // } 
    int solve(int index , vector<int>&nums , int  k,vector<int> &dp){
        if(index >= nums.size()-1) 
            return 0;
        if(dp[index]!=-1)
            return dp[index];
        int val = 0 ;
        int mini = 1e9;
        for(int i = index ; i < nums.size() ; i++){
          val+=nums[i];
          int gap = i - index;
          if(val + gap <= k && i < nums.size() - 1){
              int cost = pow(k - (val+gap) , 2) + solve(i+1 , nums , k,dp);
              mini = min(mini , cost);
          }
          else if(val + gap <= k && i == nums.size() - 1) return dp[i]=0;
        }
        return dp[index]=mini;
    }
    int solveWordWrap(vector<int>nums, int k) 
    {
        vector<int> dp(nums.size(),-1);
        return solve(0 , nums , k,dp);
    } 
    // int solveWordWrap(vector<int>nums, int k) 
    // {
    //     int ind=0,n=nums.size();
    //     int res=0;
    //     while(ind<n-1){
    //         int sum=0;
    //         int i;
    //         for(i=ind;i<n;i++){
    //             sum+=nums[i];
    //             int gap=i-ind;
    //             if(sum+gap<=k && i<n-1){
    //                 res+=pow(k-(sum+gap),2);
    //             }
    //             else break;
    //         }
    //         ind=i;
    //     }
    //     return res;
    // } 
};
