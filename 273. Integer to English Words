// class Solution {
// public:
//     string numberToWords(int num) {
    // vector<string> ones{"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"};
    //     vector<string> en{"Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
    //     vector<string> tens{"","Ten","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety"};
//         string res="";
//         vector<int> nums;
//         if(num==0){
//             return "Zero";
//         }
//         while(num){
//             nums.push_back(num%10);
//             num/=10;
//         }
        
//         int n=nums.size();
//         int cnt=1,i=0;
//         while(i<n){
//             switch(cnt){
//                 case 1: if(nums[i]==0 && nums[i+1]==0){ i++; break;}
//                         if(i+1<n){
//                             if(nums[i+1]==1){
//                                 res=en[nums[i]]+res;
//                             }
//                             else if(nums[i+1]==0)
//                                 res=ones[nums[i]]+res;
//                             else
//                                 res=tens[nums[i+1]]+" "+ones[nums[i]]+res;
//                             i++;
//                         }
//                         else
//                             res=ones[nums[i]]+res;
//                     break;
//                 case 2: if(nums[i]==0)  break;
//                         res=ones[nums[i]]+" Hundred "+res;
//                     break;
//                 case 3: if(nums[i]==0 && nums[i+1]==0){ i++; break;}
//                         if(i+1<n){
//                             if(nums[i+1]==1){
//                                 res=en[nums[i]]+" Thousand "+res;
//                                 i++;
//                             }
//                             else if(nums[i+1]==0)  
//                                 res=ones[nums[i]]+" Thousand "+res;
//                             else{
//                                 res=tens[nums[i+1]]+" "+ones[nums[i]]+" Thousand "+res;
//                                 i++;
//                             }
//                         }
//                         else
//                             res=ones[nums[i]]+" Thousand "+res;
//                     break;
//                 case 4: if(nums[i]==0)  break;
//                         res=ones[nums[i]]+" Hundred "+res;
//                     break;
//                 case 5: if(nums[i]==0 && nums[i+1]==0){ i++; break;}
//                         if(i+1<n){
//                             if(nums[i+1]==1){
//                                 res=en[nums[i]]+" Million "+res;
//                                 i++;
//                             }
//                             else if(nums[i+1]==0)  
//                                 res=ones[nums[i]]+" Million "+res;
//                             else{
//                                 res=tens[nums[i+1]]+" "+ones[nums[i]]+" Million "+res;
//                                 i++;
//                             }
//                         }
//                         else
//                             res=ones[nums[i]]+" Million "+res;
//                     break;
//                 case 6: if(nums[i]==0)  break;
//                         res=ones[nums[i]]+" Hundred "+res;
//                     break;
//                 case 7: if(nums[i]==0 && nums[i+1]==0){ i++; break;}
//                         if(i+1<n){
//                             if(nums[i+1]==1){
//                                 res=en[nums[i]]+" Billion "+res;
//                                 i++;
//                             }
//                             else if(nums[i+1]==0)  
//                                 res=ones[nums[i]]+" Billion "+res;
//                             else{
//                                 res=tens[nums[i+1]]+" "+ones[nums[i]]+" Billion "+res;
//                                 i++;
//                             }
//                         }
//                         else
//                             res=ones[nums[i]]+" Billion "+res;
//                     break;
//                 default: break;
//             }
//             cnt++;
//             i++;
//         }
//         n=res.length();
//         if(res[n-1]==' ')
//             res.pop_back();
//         return res;
//     }
// };

class Solution{
    public:
        string solve(int num){
            vector<string> ones{"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"};
            vector<string> en{"Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
            vector<string> tens{"","Ten","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety"};
            if(num==0)
                return "Zero";
            int h =num/100;
            int ten=(num-h*100)/10;
            int ont=(num-h*100-ten*10);
            string res="";
            if(h)
                res+=ones[h]+" Hundred ";
            if(ten){
                if(ten==1){
                    res+=en[ont]+" ";
                    return res;
                }
                else{
                    // if(ont)
                    //     res+=tens[ten]+" "+ones[ont];
                    // else
                        res+=tens[ten]+" ";
                }
            }
            if(ont)
                res+=ones[ont];
            cout<<res<<endl;
            return res;
        }
        string numberToWords(int num){
            if(num==0)  return "Zero";
            int b=num/1000000000;
            int m=(num - b * 1000000000) / 1000000;
            int t = (num - b * 1000000000 - m * 1000000) / 1000;
            int rest = num - b*1000000000 - m*1000000 - t*1000;
            cout<<b<<" "<<m<<" "<<t<<" "<<rest<<endl;
            string res="";
            if(b)
                res+= solve(b) +" Billion ";
            if(m)
                res+=solve(m)+" Million ";
            if(t)
                res+=solve(t)+" Thousand ";
            if(rest!=0){
                res+=solve(rest);
            }
            string ans="";
            for(int i=0;i<res.size();i++){
                if(i+1<res.size() && res[i]==' ' && res[i+1]==' ')
                    continue;
                ans+=res[i];
            }
            if(ans[ans.size()-1]==' ')
                ans.pop_back();
            return ans;
        }
};
