// class Solution {
// public:
//     string reorganizeString(string s) {
//         int n=s.length();
//         vector<int> _alpha(26,0);
//         for(auto i:s)
//             _alpha[i-'a']++;
//         int mxcnt=0;
//         for(int i=0;i<26;i++){
//             mxcnt=max(mxcnt,_alpha[i]);
//         }
//         if((n&1 && mxcnt>(n/2+1)) || (!(n&1) && mxcnt>n/2))
//             return "";
//         string res=s;
//         int j=0;
//         for(int i=0;i<26;i++){
//             while(j<n && _alpha[i]>0){
//                 res[j]=i+'a';
//                 j+=2;
//                 _alpha[i]--;
//                 if(j>=n)
//                 j=1;
//             }
//         }
//         return res;
//     }
// };

// class Solution {
// public:
//     string reorganizeString(std::string s) {
//     std::unordered_map<char, int> freq_map;
//     for (char c : s) {
//         freq_map[c]++;
//     }

//     std::vector<char> sorted_chars;
//     for (auto& pair : freq_map) {
//         sorted_chars.push_back(pair.first);
//     }

//     std::sort(sorted_chars.begin(), sorted_chars.end(), [&](char a, char b) {
//         return freq_map[a] > freq_map[b];
//     });

//     if (freq_map[sorted_chars[0]] > (s.length() + 1) / 2) {
//         return "";
//     }

//     std::string res(s.length(), ' ');
//     int i = 0;
//     for (char c : sorted_chars) {
//         for (int j = 0; j < freq_map[c]; ++j) {
//             if (i >= s.length()) {
//                 i = 1;
//             }
//             res[i] = c;
//             i += 2;
//         }
//     }

//     return res;
// }
// };

class Solution {
public:
    string reorganizeString(string s) {
        unordered_map<char, int> freq_map;
        for (char c : s) {
            freq_map[c]++;
        }

        priority_queue<pair<int, char>> max_heap;
        for (auto &[ch, freq] : freq_map) {
            max_heap.push({freq, ch});
        }

        string res;
        while (max_heap.size() >= 2) {
            auto [freq1, char1] = max_heap.top(); max_heap.pop();
            auto [freq2, char2] = max_heap.top(); max_heap.pop();

            res += char1;
            res += char2;

            if (--freq1 > 0) max_heap.push({freq1, char1});
            if (--freq2 > 0) max_heap.push({freq2, char2});
        }

        if (!max_heap.empty()) {
            auto [freq, ch] = max_heap.top();
            if (freq > 1) return "";
            res += ch;
        }

        return res;
    }
};
