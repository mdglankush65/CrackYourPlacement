class Solution {
public:
    void merge(int left, int mid, int right, vector<pair<int, int>>& arr,vector<int>& count){
        vector<pair<int, int>> temp(right - left + 1);
        int i = left;
        int j = mid + 1;
        int k = 0;
        
        while(i <= mid && j <= right){
            if(arr[i].first <= arr[j].first)
                temp[k++] = arr[j++]; 
            else{
                count[arr[i].second] += (right - j + 1);
                temp[k++] = arr[i++];
            }
        }
        while(i <= mid)
            temp[k++] = arr[i++];
        while(j <= right)
            temp[k++] = arr[j++];
        
        for(int l = left; l <= right; l++)
            arr[l] = temp[l - left];
    }
                
    void mergeSort(int left, int right, vector<pair<int, int>>& arr, vector<int>& count){
        if(left >= right)
            return;
        int mid = left + (right - left) / 2;
        mergeSort(left, mid, arr, count);
        mergeSort(mid + 1, right, arr, count);
        merge(left, mid, right, arr, count);
    }
	vector<int> countSmaller(vector<int>& nums){   
        int n=nums.size();
	    vector<pair<int, int>> arr;
	    for(int i = 0; i < n; i++)
	        arr.push_back({nums[i], i});
	    vector<int> count(n, 0);
	    mergeSort(0, n - 1, arr, count);
	    return count;
	}
};
// class Solution {
// public:
//     void merge(vector<int>& nums,int s,int mid,int e,unordered_map<int,int> &mp){
//         int l=mid-s+1,r=e-mid;
//         vector<int> a(l),b(r);
//         for(int i=0;i<l;i++)
//             a[i]=nums[s+i];
        
//         for(int i=0;i<r;i++)
//             b[i]=nums[mid+1+i];

//         int k=s,i=0,j=0;
//         while(i<l and j<r){
//             if(a[i]<=b[j])
//                 nums[k++]=a[i++];
//             else{
//                 for(int m=i;m<l;m++)
//                     mp[a[m]]++;
//                 nums[k++]=b[j++];
//             }
//         }
//         while(i<l)
//             nums[k++]=a[i++];
//         while(j<r)
//             nums[k++]=b[j++];
//     }
//     void mergeSort(vector<int>& nums,int s,int e,unordered_map<int,int> &mp){
//         if(s<e){
//             int mid=s+(e-s)/2;
//             mergeSort(nums,s,mid,mp);
//             mergeSort(nums,mid+1,e,mp);
//             merge(nums,s,mid,e,mp);
//         }
//     }
//     vector<int> countSmaller(vector<int>& nums) {
//         int n=nums.size();
//         vector<int> res(n,0),temp=nums;
//         unordered_map<int,int> mp;
//         mergeSort(nums,0,n-1,mp);
//         for(auto i:mp)
//             cout<<i.first<<"\t"<<i.second<<endl;
//         for(int i=0;i<n;i++)
//             res[i]=mp[temp[i]];
//         return res;
//     }
// };


// class Solution {
//     int bit[BIT_SIZE] = {0};
    
//     inline void bitUpdate(int index) {
//         while (index < BIT_SIZE) {
//             bit[index]++;
//             index += index & -index;
//         }
//     }
//     inline int bitAns(int index) {
//         int result = 0;
//         while (index > 0) {
//             result += bit[index];
//             index -= index & -index;
//         }
//         return result;
//     }  
// public:
//     vector<int> countSmaller(const vector<int>& nums) {
//         vector<int> result (nums.size());
//         for (int index = nums.size() - 1; index >= 0; --index) {
//             result[index] = bitAns(nums[index] + BIT_OFFSET - 1);
//             bitUpdate(nums[index] + BIT_OFFSET);
//         }
//         return result;
//     }
// };
