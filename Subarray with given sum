class Solution
{
    public:
    
    vector<int> subarraySum(vector<int>arr, int n, long long s){
        if(s==0)
            return {-1};
        int i=0,j=0,sum=0;
        while(j<n){
            sum+=arr[j];
            // if(sum<s){
            //     j++;
            //     continue;
            // }
            while(i<=j && sum>s){
                sum-=arr[i];
                i++;
            }
            if(sum==s)
                return {i+1,j+1};
            j++;
        }
        return {-1};
    }
    //Function to find a continuous sub-array which adds up to a given number.
    // vector<int> subarraySum(vector<int>arr, int n, long long s)
    // {
    //     // Your code here
    //     int sum=0;
    //     vector<int> pre=arr;
    //     for(int i=1;i<n;i++)
    //         pre[i]+=pre[i-1];

    //     queue<pair<int,int>> q;
    //     // q.push({pre[0],0});
    //     for(int i=0;i<n;i++){
    //         if(pre[i]<s){
    //             q.push({pre[i],i});
    //             continue;
    //         }
    //         sum=pre[i];
    //         if(sum==s)
    //             return {1,i+1};
    //         int size=q.size();
    //         while(size--){
    //             auto p=q.front();
    //             int val=p.first,ind=p.second;
    //             q.pop();
    //             if(sum-val==s){
    //                 return {ind+2,i+1};
    //             }
    //             q.push({val,ind});
    //         }
    //         q.push({pre[i],i});
    //     }
    //     return {-1};
    // }
    // vector<int> subarraySum(vector<int>arr, int n, long long s){
    //     map<long long, long long> m;
    //     long long i, currsum=0;
    //     for(i=0;i<n;i++)
    //     {
    //         currsum+=arr[i];
    //         if(currsum == s)
    //         return {1,i+1};
    //         if(m.find(currsum-s) != m.end())
    //         return {m[currsum-s]+2,i+1};
    //         else
    //         m[currsum]=i;
    //     }
    //     return {-1};
    // }
};
