class Solution {
public:
    bool solve(vector<int>& stones,int i,int k,vector<vector<int>> &dp){
        if(i==stones.size()-1)
            return true;
        if(dp[i][k]!=-1)
            return dp[i][k];
        for(int s=i+1;s<stones.size();s++){
            if(stones[s]==stones[i]+k || stones[s]==stones[i]+k-1 || stones[s]==stones[i]+k+1){
                int val=stones[s]-stones[i];
                if(solve(stones,s,val,dp))
                    return dp[i][val]=true; 
            }
        }
        return dp[i][k]=false;
    }
    bool canCross(vector<int>& stones,int i=0,int k=1) {
        // if(i==stones.size()-1)
        //     return true;
        // if(i==0 && stones[i+1]>1)
        //     return false;
        // if(i==0)
        //     return canCross(stones,i+1,1);
        // for(int s=i+1;s<stones.size();s++){
        //     if(stones[s]==stones[i]+k || stones[s]==stones[i]+k-1 || stones[s]==stones[i]+k+1){
        //         int val=stones[s]-stones[i];
        //         if(canCross(stones,s,val))
        //             return true;
        //     }
        // }
        // return false;
        vector<vector<int>> dp(stones.size(),vector<int> (stones.size(),-1));
        if(stones[1]>1)
            return false;
        return solve(stones,1,1,dp);
    }
};
