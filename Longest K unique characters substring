
// int n=s.length();
//         int l=-1,r=0,res=0;
//         unordered_map<char,int> mp;
//         while(l<=r && r<n){
//             if(mp[s[r]]>=1){
//                 mp[s[l]]--;
//                 l++;
//                 res=max(res,r-l+1);
//             }
//             else{
//                 mp[s[r]]++;
//                 if(l==-1)
//                     l=0;
//                 r++;
//                 res=max(res,r-l);
//             }
//         }
//         if(res>=k)
//                 return res;
//         return -1;

class Solution{
  public:
    int longestKSubstr(string s, int k) {
        // int n=s.length();
        // int l=0,r=0;
        // int res=-1,distinct=0;
        // unordered_map<char,int> mp;
        // while(l<=r && r<n){
        //     // mp[s[r]]++;
        //     if(mp[s[r]]){
        //         mp[s[l]]--;
        //         l++;
        //         // if(mp[s[r]]==1)
        //             // distinct++;
        //         if(distinct==k)
        //             res=(res,r-l+1);
        //     }
        //     else{
        //         distinct++;
        //         if(l==-1)
        //             l=0;
        //         if(distinct==k)
        //             res=(res,r-l+1);
        //         r++;
        //     }
        // }
        // return res;
        unordered_map<char,int>mp;
        int i=0,j=0,ans=INT_MIN;
        for(int j=0;j<s.size();j++){
            mp[s[j]]++;
            if(mp.size()==k)
                ans=max(ans,j-i+1);
            else if(mp.size()>k){
                while(mp.size()!=k){
                    mp[s[i]]--;
                    if(mp[s[i]]==0) mp.erase(s[i]);
                    i++;
                }
            }
        }
        return ans==INT_MIN?-1:ans;
    }
};
