/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    unordered_map<int,TreeNode*> temp;
    void inorder(TreeNode* root){
        if(!root)
            return ;
        inorder(root->left);
        res.push_back(root->val);
        temp[root->val]=root;
        inorder(root->right);
    }
    void recoverTree(TreeNode* root) {
        inorder(root);
        vector<int> mp=res;
        sort(mp.begin(),mp.end());
        for(int i=0;i<res.size();i++){
            if(res[i]!=mp[i]){
                temp[res[i]]->val=mp[i];
                temp[mp[i]]->val=res[i];
                break;
            }
        }
        // for(int i=0;i<res.size();i++){
        //     if(res[i]>res[i+1]){
        //         int j=0;
        //         while(j<res.size() && res[j]<res[i+1])
        //             j++;
        //         int val=temp[j]->val;
        //         temp[j]->val=temp[i+1]->val;
        //         temp[i+1]->val=val;
        //         break;
        //     }
        // }

    }
};
